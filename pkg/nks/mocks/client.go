// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	vnks "github.com/NaverCloudPlatform/ncloud-sdk-go-v2/services/vnks"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClustersUuidGet provides a mock function with given fields: ctx, uuid
func (_m *Client) ClustersUuidGet(ctx context.Context, uuid *string) (*vnks.ClusterRes, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *vnks.ClusterRes
	if rf, ok := ret.Get(0).(func(context.Context, *string) *vnks.ClusterRes); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vnks.ClusterRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersUuidKubeconfigGet provides a mock function with given fields: ctx, uuid
func (_m *Client) ClustersUuidKubeconfigGet(ctx context.Context, uuid *string) (*vnks.KubeconfigRes, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *vnks.KubeconfigRes
	if rf, ok := ret.Get(0).(func(context.Context, *string) *vnks.KubeconfigRes); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vnks.KubeconfigRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
